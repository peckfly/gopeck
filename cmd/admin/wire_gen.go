// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/peckfly/gopeck/internal/conf"
	"github.com/peckfly/gopeck/internal/mods/admin/biz"
	data2 "github.com/peckfly/gopeck/internal/mods/admin/data"
	"github.com/peckfly/gopeck/internal/mods/admin/server"
	"github.com/peckfly/gopeck/internal/mods/admin/service"
	"github.com/peckfly/gopeck/internal/mods/common/data"
	"github.com/peckfly/gopeck/internal/pkg/common"
	"github.com/peckfly/gopeck/internal/pkg/jwtx"
	"github.com/peckfly/gopeck/pkg/cachex"
	"github.com/peckfly/gopeck/pkg/registry"
	"go.etcd.io/etcd/client/v3"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func wireApp(serverConf *conf.ServerConf, client *clientv3.Client, db *gorm.DB, discovery registry.Discovery, cache cachex.Cache, trans *common.Trans, auther jwtx.Auther) (*server.AdminServer, error) {
	recordRepository := data.NewRecordRepository(db)
	nodeRepository := data.NewNodeRepository(client, cache)
	queRepository := data.NewQueRepository(cache)
	stressUsecase := biz.NewStressUsecase(recordRepository, nodeRepository, queRepository, discovery, serverConf)
	stressService := service.NewStressService(stressUsecase)
	userRepository := data2.NewUserRepository(db)
	userRoleRepository := data2.NewUserRoleRepository(db)
	userUsecase := biz.NewUserUsecase(cache, trans, userRepository, userRoleRepository, serverConf)
	userService := service.NewUserService(userUsecase)
	menuRepository := data2.NewMenuRepository(db)
	loginUsecase := biz.NewLoginUsecase(cache, serverConf, userRepository, auther, userUsecase, userRoleRepository, menuRepository)
	loginService := service.NewLoginService(loginUsecase)
	roleRepository := data2.NewRoleRepository(db)
	menuResourceRepository := data2.NewMenuResourceRepository(db)
	casbinUsecase := biz.NewCasbinUsecase(cache, menuRepository, roleRepository, menuResourceRepository, serverConf)
	casbinService := service.NewCasbinService(casbinUsecase)
	roleMenuRepository := data2.NewRoleMenuRepository(db)
	menuUsecase := biz.NewMenuUsecase(cache, trans, menuRepository, menuResourceRepository, roleMenuRepository, serverConf)
	menuService := service.NewMenuService(menuUsecase)
	roleUsecase := biz.NewRoleUsecase(cache, trans, roleRepository, roleMenuRepository, userRoleRepository)
	roleService := service.NewRoleService(roleUsecase)
	nodeUsecase := biz.NewNodeUsecase(nodeRepository, discovery)
	nodeService := service.NewNodeService(nodeUsecase)
	adminServer := server.NewAdminServer(serverConf, stressService, userService, loginService, casbinService, menuService, roleService, nodeService)
	return adminServer, nil
}
