// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: api/pecker/v1/peck.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PeckService_Peck_FullMethodName = "/pecker.PeckService/peck"
	PeckService_Stop_FullMethodName = "/pecker.PeckService/stop"
)

// PeckServiceClient is the client API for PeckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeckServiceClient interface {
	Peck(ctx context.Context, in *PeckRequest, opts ...grpc.CallOption) (*PeckReply, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
}

type peckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeckServiceClient(cc grpc.ClientConnInterface) PeckServiceClient {
	return &peckServiceClient{cc}
}

func (c *peckServiceClient) Peck(ctx context.Context, in *PeckRequest, opts ...grpc.CallOption) (*PeckReply, error) {
	out := new(PeckReply)
	err := c.cc.Invoke(ctx, PeckService_Peck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peckServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := c.cc.Invoke(ctx, PeckService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeckServiceServer is the server API for PeckService service.
// All implementations must embed UnimplementedPeckServiceServer
// for forward compatibility
type PeckServiceServer interface {
	Peck(context.Context, *PeckRequest) (*PeckReply, error)
	Stop(context.Context, *StopRequest) (*StopReply, error)
	mustEmbedUnimplementedPeckServiceServer()
}

// UnimplementedPeckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeckServiceServer struct {
}

func (UnimplementedPeckServiceServer) Peck(context.Context, *PeckRequest) (*PeckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peck not implemented")
}
func (UnimplementedPeckServiceServer) Stop(context.Context, *StopRequest) (*StopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPeckServiceServer) mustEmbedUnimplementedPeckServiceServer() {}

// UnsafePeckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeckServiceServer will
// result in compilation errors.
type UnsafePeckServiceServer interface {
	mustEmbedUnimplementedPeckServiceServer()
}

func RegisterPeckServiceServer(s grpc.ServiceRegistrar, srv PeckServiceServer) {
	s.RegisterService(&PeckService_ServiceDesc, srv)
}

func _PeckService_Peck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeckServiceServer).Peck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeckService_Peck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeckServiceServer).Peck(ctx, req.(*PeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeckService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeckServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeckService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeckServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeckService_ServiceDesc is the grpc.ServiceDesc for PeckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pecker.PeckService",
	HandlerType: (*PeckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "peck",
			Handler:    _PeckService_Peck_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _PeckService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pecker/v1/peck.proto",
}
