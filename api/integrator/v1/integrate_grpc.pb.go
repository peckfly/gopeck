// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: api/integrator/v1/integrate.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IntegrateService_Integrate_FullMethodName = "/integrate.IntegrateService/integrate"
)

// IntegrateServiceClient is the client API for IntegrateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrateServiceClient interface {
	Integrate(ctx context.Context, in *IntegrateRequest, opts ...grpc.CallOption) (*IntegrateReply, error)
}

type integrateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrateServiceClient(cc grpc.ClientConnInterface) IntegrateServiceClient {
	return &integrateServiceClient{cc}
}

func (c *integrateServiceClient) Integrate(ctx context.Context, in *IntegrateRequest, opts ...grpc.CallOption) (*IntegrateReply, error) {
	out := new(IntegrateReply)
	err := c.cc.Invoke(ctx, IntegrateService_Integrate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrateServiceServer is the server API for IntegrateService service.
// All implementations must embed UnimplementedIntegrateServiceServer
// for forward compatibility
type IntegrateServiceServer interface {
	Integrate(context.Context, *IntegrateRequest) (*IntegrateReply, error)
	mustEmbedUnimplementedIntegrateServiceServer()
}

// UnimplementedIntegrateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrateServiceServer struct {
}

func (UnimplementedIntegrateServiceServer) Integrate(context.Context, *IntegrateRequest) (*IntegrateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Integrate not implemented")
}
func (UnimplementedIntegrateServiceServer) mustEmbedUnimplementedIntegrateServiceServer() {}

// UnsafeIntegrateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrateServiceServer will
// result in compilation errors.
type UnsafeIntegrateServiceServer interface {
	mustEmbedUnimplementedIntegrateServiceServer()
}

func RegisterIntegrateServiceServer(s grpc.ServiceRegistrar, srv IntegrateServiceServer) {
	s.RegisterService(&IntegrateService_ServiceDesc, srv)
}

func _IntegrateService_Integrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrateServiceServer).Integrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrateService_Integrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrateServiceServer).Integrate(ctx, req.(*IntegrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrateService_ServiceDesc is the grpc.ServiceDesc for IntegrateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integrate.IntegrateService",
	HandlerType: (*IntegrateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "integrate",
			Handler:    _IntegrateService_Integrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/integrator/v1/integrate.proto",
}
